Circuit Breaker (переводится с английского как "выключатель") - это паттерн проектирования и механизм, используемый в
разработке программного обеспечения для обработки ошибок и отказоустойчивости в распределенных системах.

Когда клиентское приложение обращается к удаленному сервису (например, через сетевой вызов), возможны различные сценарии
ошибок, такие как задержка, сбой или перегрузка сервиса. Без механизма Circuit Breaker это может привести к тому, что
клиентское приложение будет блокироваться или терять производительность при повторных неудачных запросах к сервису.

Работа Circuit Breaker заключается в следующем:

Слежение за состоянием сервиса: Circuit Breaker отслеживает состояние удаленного сервиса и подсчитывает количество
неудачных запросов или ошибок, происходящих при обращении к нему.

Установление пороговых значений: Circuit Breaker определяет пороговые значения для количества неудачных запросов или
ошибок. Когда количество неудачных запросов превышает заданное значение, Circuit Breaker переходит в "открытое"
состояние.

Открытое состояние: Когда Circuit Breaker находится в открытом состоянии, он предполагает, что удаленный сервис
недоступен, и начинает немедленно отклонять запросы к этому сервису, чтобы предотвратить дополнительные неудачные
вызовы и избежать блокировки клиентского приложения.

Периодический тест: В открытом состоянии Circuit Breaker периодически выполняет тестовые запросы к сервису, чтобы
проверить его доступность.

Закрытое состояние: Если тестовые запросы успешны, Circuit Breaker переходит в "закрытое" состояние, и обращения к
сервису возобновляются.

Полуоткрытое состояние: Если тестовые запросы продолжают неудачные, Circuit Breaker переходит в "полуоткрытое" состояние,
в котором он позволяет ограниченное количество запросов к сервису для проверки его доступности. Если эти запросы успешны,
Circuit Breaker переходит в закрытое состояние, иначе снова переходит в открытое состояние.

Circuit Breaker позволяет обработать ситуации, когда удаленный сервис временно недоступен или испытывает проблемы,
предотвращая излишнее использование ресурсов клиентского приложения и улучшая отказоустойчивость всей системы. Этот
механизм особенно полезен в распределенных системах, где сетевые задержки и ошибки могут возникать достаточно часто.